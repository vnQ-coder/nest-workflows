// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: proto/users.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { CreateUserDto, UpdateUserDto } from '../../dtos/user';
import {
  DeleteUserRequest,
  DeleteUserResponse,
  Empty,
  GetUserRequest,
  UserListResponse,
  UserResponse,
} from '../../interfaces/user';

export const protobufPackage = 'users';

// üöÄ gRPC Service Name

export const USERS_PACKAGE_NAME = 'users';

export const USER_SERVICE_NAME = 'UserService';

// üßë‚Äçüíª Client Interface

export interface UserServiceClient {
  createUser(request: CreateUserDto): Observable<UserResponse>;

  getUser(request: GetUserRequest): Observable<UserResponse>;

  updateUser(request: UpdateUserDto): Observable<UserResponse>;

  deleteUser(request: DeleteUserRequest): Observable<DeleteUserResponse>;

  listUsers(request: Empty): Observable<UserListResponse>;
}

// üéØ Controller Interface (Server Side)

export interface UserServiceController {
  createUser(
    request: CreateUserDto
  ): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  getUser(
    request: GetUserRequest
  ): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  updateUser(
    request: UpdateUserDto
  ): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  deleteUser(
    request: DeleteUserRequest
  ):
    | Promise<DeleteUserResponse>
    | Observable<DeleteUserResponse>
    | DeleteUserResponse;

  listUsers(
    request: Empty
  ):
    | Promise<UserListResponse>
    | Observable<UserListResponse>
    | UserListResponse;
}

// üßô Decorator Factory for NestJS gRPC Controllers

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createUser',
      'getUser',
      'updateUser',
      'deleteUser',
      'listUsers',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      );
      GrpcMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor
      );
    }

    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      );
      GrpcStreamMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor
      );
    }
  };
}
